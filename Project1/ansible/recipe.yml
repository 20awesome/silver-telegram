---
- hosts: all
  #accelerate: true
  tasks:

  - name: ensure locales are present
    copy: src=content/locale dest=/etc/default/locale owner=root group=root mode=644
  - name: generate present locales
    raw: locale-gen en_US.UTF-8 && dpkg-reconfigure locales


  - name: ensure setting  soft limits nofile
    lineinfile: dest=/etc/security/limits.conf
              line='*   soft    nofile  999999'

  - name: ensure setting  hard limits nofile
    lineinfile: dest=/etc/security/limits.conf
              line='*   hard    nofile  999999'

  - name: ensure setting  soft limits nofile for root
    lineinfile: dest=/etc/security/limits.conf
              line='root   soft    nofile  999999'

  - name: ensure setting  hard limits nofile for root
    lineinfile: dest=/etc/security/limits.conf
              line='root   hard    nofile  999999'



  - name: ensure setting  soft limits nproc
    lineinfile: dest=/etc/security/limits.conf
              line='*   soft    nproc  999999'

  - name: ensure setting  hard limits  nproc
    lineinfile: dest=/etc/security/limits.conf
              line='*   hard    nproc  999999'

  - name: ensure setting  soft limits nproc for root
    lineinfile: dest=/etc/security/limits.conf
              line='root   soft    nproc  999999'

  - name: ensure setting  hard limits nprocfor root
    lineinfile: dest=/etc/security/limits.conf
              line='root   hard    nproc  999999'




  - name: ensure setting sessions for ent sessions
    lineinfile: dest=/etc/pam.d/common-session
              line='session required pam_limits.so'
  - name: ensure setting  sessions for non ent sessions
    lineinfile: dest=/etc/pam.d/common-session-noninteractive
              line='session required pam_limits.so'




  - name: Disable THP after startup for redis step 1
    lineinfile: dest=/etc/rc.local
              regexp='^echo never > /sys/kernel/mm/transparent_hugepage/enabled'
              line='echo never > /sys/kernel/mm/transparent_hugepage/enabled'
              insertbefore=BOF
  - name: Disable THP after startup for redis step 2
    lineinfile: dest=/etc/rc.local
              regexp='^echo never > /sys/kernel/mm/transparent_hugepage/defrag'
              line='echo never > /sys/kernel/mm/transparent_hugepage/defrag'
              insertbefore=BOF
  - name: Disable THP on a running system for redis step 1
    raw: sudo echo never > /sys/kernel/mm/transparent_hugepage/enabled
  - name: Disable THP on a running system for redis step 2
    raw: sudo echo never > /sys/kernel/mm/transparent_hugepage/defrag



  - name: ensure apt cache is up to date
    apt: update_cache=yes cache_valid_time=3600
  - name: ensure packages are installed
    apt: name={{item}}
    with_items:
        - python-psycopg2
        - python-pip
        - apparmor-utils
        - sysv-rc-conf
        - mc
        - nano
        - screen
        - htop
        - libpq-dev
        - python-pycurl
        - python-dev
        - libmysqlclient-dev
        - python-virtualenv
        - git
        - postfix
        - python-apt

  - name: ensure packages docker-py installed
    raw: pip install docker-py

  - name: ensure packages redis python installed
    raw: pip install redis
  - name: ensure packages python-keyczar installed
    raw: pip install python-keyczar



  - name: Add sysctl tuning
    sysctl: name={{ item.name }} value="{{item.value}}" state=present reload=yes
    with_items:

        - { name: 'net.core.rmem_max', value: '16777216' }
        - { name: 'net.core.wmem_max', value: '16777216' }
        - { name: 'net.core.rmem_default', value: '65536' }
        - { name: 'net.core.wmem_default', value: '65536' }
        - { name: 'net.ipv4.tcp_rmem', value: '4096 87380 16777216' }
        - { name: 'net.ipv4.tcp_wmem', value: '4096 87380 16777216' }
        - { name: 'net.ipv4.tcp_mem', value: '8388608 8388608 8388608' }
        - { name: 'net.ipv4.tcp_max_tw_buckets', value: '6000000' }
        - { name: 'net.ipv4.tcp_max_syn_backlog', value: '65536' }
        - { name: 'net.ipv4.tcp_max_orphans', value: '262144' }
        - { name: 'net.core.somaxconn ', value: ' 16384' }
        - { name: 'net.core.netdev_max_backlog ', value: '16384' }
        - { name: 'net.ipv4.tcp_synack_retries ', value: '5' }
        - { name: 'net.ipv4.tcp_syn_retries ', value: '5' }
        - { name: 'net.ipv4.tcp_fin_timeout ', value: '7' }
        - { name: 'net.ipv4.tcp_slow_start_after_idle ', value: '0' }
        - { name: 'vm.swappiness ', value: '0' }
        - { name: 'net.ipv4.tcp_syncookies ', value: '0' }
        - { name: 'net.ipv4.ip_local_port_range ', value: '1024 65535' }
        - { name: 'net.ipv4.tcp_congestion_control ', value: 'cubic' }
        - { name: 'net.ipv4.tcp_keepalive_time ', value: '1800' }
        - { name: 'net.ipv4.tcp_sack ', value: '0' }
        - { name: 'vm.vfs_cache_pressure ', value: '50' }
        - { name: 'net.ipv4.tcp_sack ', value: '0' }
        - { name: 'fs.file-max', value: '65536' }
        - { name: 'vm.overcommit_memory', value: '0' }
        - { name: 'net.ipv4.ip_nonlocal_bind', value: '1'}

  - name: Create swap space
    command: fallocate -l 6G /swapfile
    when: ansible_swaptotal_mb < 1

  - name: Make swap
    command: mkswap /swapfile
    when: ansible_swaptotal_mb < 1

  - name: Add to fstab
    action: lineinfile dest=/etc/fstab regexp="/swapfile" line="/swapfile none swap sw 0 0" state=present

  - name: Turn swap on
    command: swapon -a

  - name: Set swapiness
    shell: echo 0 | sudo tee /proc/sys/vm/swappiness

  - name: set swapinessas
    sysctl:
      name: vm.swappiness
      value: "0"

  - name:  Push hosts
    template: src=content/hosts.j2 dest=/etc/hosts owner=root group=root mode=0644
    tags:
    - deployer
    - mongodb
    - pushhosts

  - name:  Disable tph
    template: src=content/disable-transparent-hugepages dest=/etc/init.d/disable-transparent-hugepages owner=root group=root mode=0755
    tags:
    - deployer
    - mongodb

  - name: Start tph and enable at boot
    service: name=disable-transparent-hugepages
             enabled=yes
             state=restarted
    tags:
    - deployer
    - mongodb

 # - name: Change ssh port from 22 to 2022
 #   shell: sed -i 's/Port 22/Port 2022/' /etc/ssh/sshd_config && service ssh reload
 #   tags:
 #   - change_ssh_port




















- hosts: all
  gather_facts: yes
  tasks:
  - name: test
    shell: echo 'FActs from all hosts'
    tags:
    - user
    - mongodb
    - hamongodb
    - deployer
    - test_facts
    - nfs-client
    - nfs-server
    - pushhosts2
  - name:  Push hosts
    template: src=content/hosts.j2 dest=/etc/hosts owner=root group=root mode=0644
    tags:
    - deployer
    - mongodb
    - pushhosts2

- hosts: mongodb

  tasks:


  - name: Prepare folder
    file: path=/var/lib/mongodb_wiredTiger owner=mongodb group=mongodb mode=0755
    tags:
    - mongodb



  - name: MongoDB | Fetch MongoDB signing key
    command: apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927
    tags:
    - mongodb

  - name: MongoDB | Add MongoDB repository
    shell: echo 'deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.2 multiverse' | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list creates=/etc/apt/sources.list.d/mongodb-org-3.2.list
    tags:
    - mongodb

  - name: MongoDB | Install latest MongoDB release
    apt: pkg=mongodb-org state=present update_cache=yes
    tags:
    - mongodb

  - name: ensure the /etc/init/mongod.conf is removed
    file: path=/etc/init/mongod.conf state=absent
    tags:
    - mongodb

  - name: ensure the/etc/init.d/mongod  is removed
    file: path=/etc/init.d/mongod  state=absent
    tags:
    - mongodb


  - name: einit script mongod
    copy: src=content/mongod dest=/etc/init.d/mongod owner=root group=root mode=755
    tags:
    - mongodb
    - mongodb-config
    - start-scipt-mongo


  - name: MongoDB | Push default configuration template
    template: src=content/mongodb.conf.j2 dest=/etc/mongod.conf owner=root group=root mode=0644
    tags:
    - mongodb
    - mongodb-config



  - name: service mongod restart
    shell: /etc/init.d/mongod  restart
    tags:
    - mongodb
    - mongodb-config


  - name: Start mongod and enable at boot
    service: name=mongod
             enabled=yes
             state=restarted
    tags:
    - mongodb
    - mongodb-config
    - start-scipt-mongo
  handlers:
  - name: restart app
    command: killall pserve
    tags:
    - user
    - deployer
    - git_clone

  - name: restart nginx
    service: name=nginx state=restarted

  - name: restart supervisor
    service: name=supervisor state=restarted

  - name: restart mongod
    service: name=mongodb state=restarted

  - name: restart haproxy
    service: name=haproxy state=restarted

  - name: restart heartbeat
    service: name=heartbeat state=restarted



- hosts: mongodb-primary
  tasks:
  - name: Create cluster from mongodb
    shell: mongo --eval  "rs.initiate()" &&  mongo --eval "rs.add('mongo1.domain.com')" && mongo --eval "rs.add('mongo2.domain.com')" && mongo --eval  "rs.add('mongo3.domain.com')"
    tags:
    - mongodb
    - mongodb-cluster



  - name: Set priority
    shell: mongo --eval "cfg = rs.conf();cfg.members[0].priority = 3;cfg.members[1].priority = 2;cfg.members[2].priority = 0;rs.reconfig(cfg)"
    tags:
    - mongodb
    - mongodb-cluster















# - hosts: 107.170.109.38

#   tasks:
#   - name: set hostname
#     hostname: name=ha1mongo.domain.com
#     tags:
#     - hamongodb

#   - name: Edit /etc/hostname
#     copy: content=ha1mongo.domain.com dest='/etc/hostname' force='yes'
#     tags:
#     - hamongodb

#   - name: Set hostname
#     shell: 'hostname ha1mongo.domain.com'
#     tags:
#     - hamongodb
#     - mongodb




# - hosts: 162.243.2.134

#   tasks:
#   - name: set hostname
#     hostname: name=ha2mongo.domain.com
#     tags:
#     - hamongodb

#   - name: Edit /etc/hostname
#     copy: content=ha2mongo.domain.com dest='/etc/hostname' force='yes'
#     tags:
#     - hamongod

#   - name: Set hostname
#     shell: 'hostname ha2mongo.domain.com'
#     tags:
#     - hamongod







- hosts: hamongodb

  tasks:

#install haproxy
    - name: add repository ansible_connection
      apt_repository: repo='ppa:vbernat/haproxy-1.5'

    - name: update apt cache
      apt: update_cache=yes cache_valid_time=3600
      tags:
      - hamongodb

    - name: install haproxy
      apt: name=haproxy state=present
      tags:
      - hamongodb
    - name: Enable init script
      replace: dest="/etc/default/haproxy" regexp="ENABLED=0" replace="ENABLED=1"
      tags:
      - hamongodb

#install heartbeat

    - name: update apt cache
      apt: update_cache=yes cache_valid_time=3600
      tags:
      - hamongodb
    - name: install heartbeat
      apt: name=heartbeat state=present
      tags:
      - hamongodb



    - name: ensure heartbeat_authkeys is present on host machine
      copy: src=content/heartbeat_authkeys dest=/etc/ha.d/authkeys owner=root group=root mode=0600
      tags:
      - hamongodb

    - name: install DO script heartbeat
      shell: curl -L -o /usr/local/bin/assign-ip http://do.co/assign-ip
      tags:
      - hamongodb


    - name: install DO script heartbeat
      file: path=/usr/local/bin/assign-ip owner=root group=root mode=0755
      tags:
      - hamongodb





    - name: ensure ha.cf is present on host machine
      template: src=content/hamongodb/ha_hamongodb.j2 dest=/etc/ha.d/ha.cf owner=root group=root mode=0644
      tags:
      - hamongodb

    - name: ensure haresourcesis present on host machine
      copy: src=content/hamongodb/haresources_hamongodb dest=/etc/ha.d/haresources owner=root group=root mode=0644
      tags:
      - hamongodb


    - name: ensure floatip present on host machine
      copy: src=content/hamongodb/floatip_hamongodb dest=/etc/init.d/floatip owner=root group=root mode=0755
      tags:
      - hamongodb

    - name: Start floatip and enable at boot
      service: name=floatip
               enabled=yes
               state=restarted
      notify: restart heartbeat
      tags:
      - hamongodb

    - name: Start heartbeat and enable at boot
      service: name=heartbeat
               enabled=yes
               state=started
      tags:
      - hamongodb



    - name: update apt cache
      apt: update_cache=yes cache_valid_time=3600
      tags:
      - haproxy
    - name: install iptables
      apt: name=iptables state=present
      tags:
      - hamongodb


    - name: Haproxy | Push default configuration template
      template: src=content/hamongodb/hamongodb.cfg.j2 dest=/etc/haproxy/haproxy.cfg owner=root group=root mode=0644
      notify: restart haproxy
      tags:
      - hamongodb



    - name: Iptables | Push default configuration template
      template: src=content/hamongodb/iptables.rules.j2 dest=/etc/iptables.rules owner=root group=root mode=0644
      tags:
      - hamongodb

    - name: Inetstart | Push default configuration template
      template: src=content/hamongodb/inetstart dest=/etc/init.d/inetstart owner=root group=root mode=0755
      tags:
      - hamongodb


    - name: service inetstart restart
      shell: /etc/init.d/inetstart  restart
      tags:
      - hamongodb

    - name: Start inetstart and enable at boot
      service: name=inetstart
               enabled=yes
               state=restarted
      tags:
      - hamongodb


  handlers:
  - name: restart app
    command: killall pserve
    tags:
    - user
    - deployer
    - git_clone

  - name: restart nginx
    service: name=nginx state=restarted

  - name: restart supervisor
    service: name=supervisor state=restarted

  - name: restart mongod
    service: name=mongodb state=restarted

  - name: restart haproxy
    service: name=haproxy state=restarted

  - name: restart heartbeat
    service: name=heartbeat state=restarted



















- hosts: 162.243.224.126

  tasks:
  - name: set hostname
    hostname: name=ha1web.domain.com
    tags:
    - haweb

  - name: Edit /etc/hostname
    copy: content=ha1web.domain.com dest='/etc/hostname' force='yes'
    tags:
    - haweb

  - name: Set hostname
    shell: 'hostname ha1web.domain.com'
    tags:
    - haweb





- hosts: 104.131.215.45

  tasks:
  - name: set hostname
    hostname: name=ha2web.domain.com
    tags:
    - haweb

  - name: Edit /etc/hostname
    copy: content=ha2web.domain.com dest='/etc/hostname' force='yes'
    tags:
    - haweb

  - name: Set hostname
    shell: 'hostname ha2web.domain.com'
    tags:
    - haweb






- hosts: haweb

  tasks:

#install haproxy
    - name: add repository ansible_connection
      apt_repository: repo='ppa:vbernat/haproxy-1.5'

    - name: update apt cache
      apt: update_cache=yes cache_valid_time=3600
      tags:
      - haweb
    - name: install haproxy
      apt: name=haproxy state=present
      tags:
      - haweb
    - name: Enable init script
      replace: dest="/etc/default/haproxy" regexp="ENABLED=0" replace="ENABLED=1"
      tags:
      - haweb

#install heartbeat

    - name: update apt cache
      apt: update_cache=yes cache_valid_time=3600
      tags:
      - haweb
    - name: install heartbeat
      apt: name=heartbeat state=present
      tags:
      - haweb



    - name: ensure heartbeat_authkeys is present on host machine
      copy: src=content/heartbeat_authkeys dest=/etc/ha.d/authkeys owner=root group=root mode=0600
      tags:
      - haweb

    - name: install DO script heartbeat
      shell: curl -L -o /usr/local/bin/assign-ip http://do.co/assign-ip
      tags:
      - haweb


    - name: install DO script heartbeat
      file: path=/usr/local/bin/assign-ip owner=root group=root mode=0755
      tags:
      - haweb





    - name: ensure ha.cf is present on host machine
      template: src=content/haweb/ha_haweb.j2 dest=/etc/ha.d/ha.cf owner=root group=root mode=0644
      tags:
      - haweb

    - name: ensure haresourcesis present on host machine
      copy: src=content/haweb/haresources_haweb dest=/etc/ha.d/haresources owner=root group=root mode=0644
      tags:
      - haweb


    - name: ensure floatip present on host machine
      copy: src=content/haweb/floatip_haweb dest=/etc/init.d/floatip owner=root group=root mode=0755
      tags:
      - haweb

    - name: Start floatip and enable at boot
      service: name=floatip
               enabled=yes
               state=restarted
      notify: restart heartbeat
      tags:
      - haweb

    - name: Start heartbeat and enable at boot
      service: name=heartbeat
               enabled=yes
               state=started
      tags:
      - haweb


    - name: Haproxy | Push default configuration template
      template: src=content/haweb/haweb.cfg.j2 dest=/etc/haproxy/haproxy.cfg owner=root group=root mode=0644
      notify: restart haproxy
      tags:
      - haweb





  handlers:
  - name: restart app
    command: killall pserve
    tags:
    - user
    - deployer
    - git_clone

  - name: restart nginx
    service: name=nginx state=restarted

  - name: restart supervisor
    service: name=supervisor state=restarted

  - name: restart mongod
    service: name=mongodb state=restarted

  - name: restart haproxy
    service: name=haproxy state=restarted

  - name: restart heartbeat
    service: name=heartbeat state=restarted























- hosts: 104.131.251.71

  tasks:
  - name: set hostname
    hostname: name=ha1mob.domain.com
    tags:
    - hamob

  - name: Edit /etc/hostname
    copy: content=ha1mob.domain.com dest='/etc/hostname' force='yes'
    tags:
    - hamob

  - name: Set hostname
    shell: 'hostname ha1mob.domain.com'
    tags:
    - hamob





- hosts: 192.241.161.26

  tasks:
  - name: set hostname
    hostname: name=ha2mob.domain.com
    tags:
    - hamob

  - name: Edit /etc/hostname
    copy: content=ha2mob.domain.com dest='/etc/hostname' force='yes'
    tags:
    - hamob

  - name: Set hostname
    shell: 'hostname ha2mob.domain.com'
    tags:
    - hamob






- hosts: hamob

  tasks:

#install haproxy
    - name: add repository ansible_connection
      apt_repository: repo='ppa:vbernat/haproxy-1.5'

    - name: update apt cache
      apt: update_cache=yes cache_valid_time=3600
      tags:
      - hamob
    - name: install haproxy
      apt: name=haproxy state=present
      tags:
      - hamob
    - name: Enable init script
      replace: dest="/etc/default/haproxy" regexp="ENABLED=0" replace="ENABLED=1"
      tags:
      - hamob

#install heartbeat

    - name: update apt cache
      apt: update_cache=yes cache_valid_time=3600
      tags:
      - hamob
    - name: install heartbeat
      apt: name=heartbeat state=present
      tags:
      - hamob



    - name: ensure heartbeat_authkeys is present on host machine
      copy: src=content/heartbeat_authkeys dest=/etc/ha.d/authkeys owner=root group=root mode=0600
      tags:
      - hamob

    - name: install DO script heartbeat
      shell: curl -L -o /usr/local/bin/assign-ip http://do.co/assign-ip
      tags:
      - hamob


    - name: install DO script heartbeat
      file: path=/usr/local/bin/assign-ip owner=root group=root mode=0755
      tags:
      - hamob





    - name: ensure ha.cf is present on host machine
      template: src=content/hamob/ha_hamob.j2 dest=/etc/ha.d/ha.cf owner=root group=root mode=0644
      tags:
      - hamob

    - name: ensure haresourcesis present on host machine
      copy: src=content/hamob/haresources_hamob dest=/etc/ha.d/haresources owner=root group=root mode=0644
      tags:
      - hamob


    - name: ensure floatip present on host machine
      copy: src=content/hamob/floatip_hamob dest=/etc/init.d/floatip owner=root group=root mode=0755
      tags:
      - hamob

    - name: Start floatip and enable at boot
      service: name=floatip
               enabled=yes
               state=restarted
      notify: restart heartbeat
      tags:
      - hamob

    - name: Start heartbeat and enable at boot
      service: name=heartbeat
               enabled=yes
               state=started
      tags:
      - hamob


    - name: Haproxy | Push default configuration template
      template: src=content/hamob/hamob.cfg.j2 dest=/etc/haproxy/haproxy.cfg owner=root group=root mode=0644
      notify: restart haproxy
      tags:
      - hamob





  handlers:
  - name: restart app
    command: killall pserve
    tags:
    - user
    - deployer
    - git_clone

  - name: restart nginx
    service: name=nginx state=restarted

  - name: restart supervisor
    service: name=supervisor state=restarted

  - name: restart mongod
    service: name=mongodb state=restarted

  - name: restart haproxy
    service: name=haproxy state=restarted

  - name: restart heartbeat
    service: name=heartbeat state=restarted


















































- hosts: webservers

  tasks:


  - name: add user
    action: user name=deployer shell=/bin/bash home=/home/deployer
    tags:
    - user

  - name: Creates directory ssh
    file: path=/home/deployer/.ssh state=directory owner=deployer group=deployer mode=0700
    tags:
    - user

  - name: ensure id_rsa is present on host machine for git acces
    copy: src=content/id_rsa dest=/home/deployer/.ssh/id_rsa owner=deployer group=deployer mode=600
    tags:
    - user

  - name: ensure id_rsa.pub is present on host machine for git acces
    copy: src=content/id_rsa.pub dest=/home/deployer/.ssh/id_rsa.pub owner=deployer group=deployer mode=600
    tags:
    - user



  - name: install nginx apt-key
    apt_key: url=http://nginx.org/keys/nginx_signing.key
    tags:
    - nginx

  - name: enable nginx repo
    apt_repository: repo='deb http://nginx.org/packages/ubuntu/ trusty nginx' state=present
    tags:
    - nginx

  - name: install the required packages
    apt: pkg={{ item }} state=present update_cache=yes cache_valid_time=3600
    with_items:
    - nginx
    - supervisor
    tags:
    - nginx







  - name: Start nginx and enable at boot
    service: name=nginx
             enabled=yes
             state=started
    tags:
    - nginx


  - name: Creates directory ssl
    file: path=/root/ssl state=directory owner=root group=root mode=0700
    tags:
    - nginx
    - update-nginx-config

  - name: ensure server.key is present
    copy: src=content/ssl/server.key dest=/root/ssl/server.key owner=root group=root mode=700
    tags:
    - nginx
    - update-nginx-config
  - name: ensure server.pem is present
    copy: src=content/ssl/server.pem dest=/root/ssl/server.pem owner=deployer group=deployer mode=700
    tags:
    - nginx
    - update-nginx-config





  - name: ensure nginx is present on host machine
    copy: src=content/nginx.conf dest=/etc/nginx/nginx.conf owner=root group=root mode=644
    tags:
    - nginx
    - update-nginx-config

  - name: ensure nginx  site config is present on host machine
    copy: src=content/domain-pyramid.conf dest=/etc/nginx/conf.d/domain-pyramid.conf owner=root group=root mode=644
    notify: restart nginx
    tags:
    - nginx
    - update-nginx-config
    - update-nginx-config2



  - name: ensure the default site is removed
    file: path=/etc/nginx/conf.d/default.conf state=absent
    notify: restart nginx
    tags:
    - nginx

  - name: ensure the default ssl site is removed
    file: path=/etc/nginx/conf.d/example_ssl.conf state=absent
    notify: restart nginx
    tags:
    - nginx




  - name: Start supervisor and enable at boot
    service: name=supervisor
             enabled=yes
             state=started
    tags:
    - supervisor

  - name: ensure pserve.conf is present on host machine
    copy: src=content/pserve.conf dest=/etc/supervisor/conf.d/pserve.conf owner=root group=root mode=644
    notify: restart supervisor
    tags:
    - supervisor




  - name: Creates directory webapp
    file: path=/home/deployer/webapp state=directory owner=deployer group=deployer mode=0775
    tags:
    - deployer

  - name: Creates directory releases
    file: path=/home/deployer/webapp/releases state=directory owner=deployer group=deployer mode=0775
    tags:
    - deployer

  - name: Creates directory pserve
    file: path=/var/log/pserve/ state=directory owner=deployer group=deployer mode=0775
    tags:
    - deployer


  - name: Get release timestamp
    command: date +%Y%m%d%H%M%S
    register: timestamp
    tags:
    - deployer

  - name: Name release directory
    command: echo '/home/deployer/webapp/releases/{{timestamp.stdout}}'
    register: release_path
    tags:
    - deployer

  - name: Create release directory
    file: path={{release_path.stdout}} state=directory owner=deployer group=deployer recurse=yes
    tags:
    - deployer


  - name: Clone repo coaches_directory
    git: repo=ssh://sc@source.masterofcode.com:2222/oleg.kovalov/coaches_directory.git dest="{{release_path.stdout}}" update=yes accept_hostkey=yes key_file=/home/deployer/.ssh/id_rsa ssh_opts="-p2222 -o StrictHostKeyChecking=no"
    sudo_user: deployer
    sudo: yes
    tags:
    - deployer
    - git_clone


  - name: Update app version
    file: >
      state=link
      path=/home/deployer/webapp/coaches_directory
      src={{release_path.stdout}}
    tags:
    - deployer


  - name: stat foo
    stat: path=/home/deployer/webapp/coaches_directory/domain/settings.py.def
    register: foo_stat
    tags:
    - deployer
  - name: Move foo to bar
    command: mv /home/deployer/webapp/coaches_directory/domain/settings.py.def /home/deployer/webapp/coaches_directory/domain/settings.py
    sudo_user: deployer
    sudo: yes
    when: foo_stat.stat.exists
    tags:
    - deployer

  - name: source install virtualenv
    shell: cd /home/deployer/webapp &&  /usr/bin/virtualenv /home/deployer/webapp/
    sudo_user: deployer
    sudo: yes
    ignore_errors: yes
    tags:
    - deployer

  - name: source bashrc crete webapp dir and source
    shell: cd /home/deployer/webapp && . bin/activate && cd /home/deployer/webapp/coaches_directory  &&  pip install -e . && python setup.py develop
    sudo_user: deployer
    sudo: yes
    tags:
    - deployer

  - name: restart supervisor
    supervisorctl: name='myapp:' state=restarted
    tags:
    - deployer

  - name: Create line in .bashrc for python env
    lineinfile: dest=/home/deployer/.bashrc
                 regexp='^source /home/deployer/webapp/bin/activate'
                 line='source /home/deployer/webapp/bin/activate'
                 insertafter=EOF
    sudo_user: deployer
    tags:
    - deployer

  - name: ensure ssh conectivity between webapp
    shell: cat /home/deployer/.ssh/id_rsa.pub > /home/deployer/.ssh/authorized_keys
    sudo_user: deployer
    sudo: yes
    tags:
    - deployer
    - sshkey


  - name: ensure ssh conectivity between webapp
    shell: chmod 700 /home/deployer/.ssh/authorized_keys
    sudo_user: deployer
    sudo: yes
    tags:
    - deployer
    - sshkey


  - name: sync mascots folder
    synchronize: src=content/mascots dest=/home/deployer/webapp/
    tags:
    - deployer
    - create folder


  - name: Set timezone to UTC
    when: ansible_date_time.tz != 'UTC'
    command: timedatectl set-timezone UTC
    tags:
    - deployer
    - set-timezone

  handlers:
  - name: restart app
    command: killall pserve
    tags:
    - user
    - deployer
    - git_clone


  - name: restart nginx
    service: name=nginx state=restarted

  - name: restart supervisor
    service: name=supervisor state=restarted

  - name: restart mongod
    service: name=mongodb state=restarted

  - name: restart haproxy
    service: name=haproxy state=restarted

  - name: restart heartbeat
    service: name=heartbeat state=restarted



- hosts: nfs-server

  tasks:
  - name: update apt cache
    apt: update_cache=yes cache_valid_time=3600
    tags:
    - nfs-server

  - name:  Install nfs-kernel-server
    apt: pkg=nfs-kernel-server state=present update_cache=yes
    tags:
    - nfs-server


  - name:  allow first client
    lineinfile: dest=/etc/exports
                regexp='^/home/deployer/webapp/mascots       {{client1}}'
                line='/home/deployer/webapp/mascots       {{client1}}(rw,sync,no_root_squash,no_subtree_check)'
                insertbefore=BOF
    tags:
    - nfs-server

  - name:  allow second client
    lineinfile: dest=/etc/exports
                regexp='^/home/deployer/webapp/mascots      {{client2}}'
                line='/home/deployer/webapp/mascots       {{client2}}(rw,sync,no_root_squash,no_subtree_check)'
                insertbefore=BOF
    tags:
    - nfs-server


  - name:  allow third client
    lineinfile: dest=/etc/exports
                regexp='^/home/deployer/webapp/mascots       {{client3}}'
                line='/home/deployer/webapp/mascots       {{client3}}(rw,sync,no_root_squash,no_subtree_check)'
                insertbefore=BOF
    tags:
    - nfs-server

  - name:  allow fourth client
    lineinfile: dest=/etc/exports
               regexp='^/home/deployer/webapp/mascots      {{client4}}'
               line='/home/deployer/webapp/mascots       {{client4}}(rw,sync,no_root_squash,no_subtree_check)'
               insertbefore=BOF
    tags:
    - nfs-server
  #- name: ensure config is present on host machine
  #  template: src=/Users/admin/Dropbox/Projects/coaches/ansible/content/exports.j2 dest=/etc/exports owner=root group=root mode=0644
  #  tags:
  #  - nfs-server
  - name: Display all variables/facts known for a host
    debug: msg="System {{ ansible_eth1 }} has uuid {{ ansible_product_uuid }}"
    tags:
    - nfs-server




  - name: Creates mascots dir
    file: path=/home/deployer/webapp/mascots state=directory owner=deployer group=deployer mode=0755
    tags:
    - nfs-server


  - name: export mount location for nfs
    shell: exportfs -a
    tags:
    - nfs-server

  - name: Start nfs-server and enable at boot
    service: name=nfs-kernel-server
             enabled=yes
             state=restarted
    tags:
    - nfs-server

- hosts: nfs-client

  tasks:
  - name: update apt cache
    apt: update_cache=yes cache_valid_time=3600
    tags:
    - nfs-client

  - name:  Install nfs-common
    apt: pkg=nfs-common state=present update_cache=yes
    tags:
    - nfs-client

  - name: Creates mascots dir
    file: path=/home/deployer/webapp/mascots state=directory owner=deployer group=deployer mode=0755
    tags:
    - nfs-client



  - lineinfile: dest=/etc/fstab
                regexp='{{server}}'
                line='{{server}}:/home/deployer/webapp/mascots   /home/deployer/webapp/mascots   nfs auto,noatime,nolock,bg,nfsvers=4,intr,tcp,actimeo=1800 0 0'
                insertbefore=BOF
    tags:
    - nfs-client

  - name:  mount location for nfs
    shell: mount -a
    tags:
    - nfs-client
